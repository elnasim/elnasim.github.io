{"version":3,"sources":["components/Card/Card.js","components/MainContent/MainContent.js","App.js","serviceWorker.js","index.js"],"names":["Card","data","useState","isSelected","setIsSelected","dontHover","setDontHover","selectHandler","e","preventDefault","cardClasses","available","push","className","href","join","onClick","onMouseLeave","topline","default","title","subtitle","subtext","map","item","key","dangerouslySetInnerHTML","text","__html","weight","cardBottomText","notAvalible","selected","MainContent","id","selectedHover","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0QAGe,SAASA,EAAT,GAAyB,IAATC,EAAQ,EAARA,KAAQ,EACDC,oBAAS,GADR,mBAC9BC,EAD8B,KAClBC,EADkB,OAEHF,oBAAS,GAFN,mBAE9BG,EAF8B,KAEnBC,EAFmB,KAI/BC,EAAgB,SAACC,GACrBA,EAAEC,iBACFL,GAAeD,IAYbO,EAAc,CAAC,QAcnB,OAZKT,EAAKU,WACRD,EAAYE,KAAK,YAGfT,GACFO,EAAYE,KAAK,YAGfP,GACFK,EAAYE,KAAK,aAIjB,yBAAKC,UAAU,YACb,uBACEC,KAAK,IACLD,UAAWH,EAAYK,KAAK,KAC5BC,QA5BoB,SAACR,GACzBD,EAAcC,GACdF,GAAa,IA2BTW,aAAc,kBAAMX,GAAa,KAEjC,yBAAKO,UAAU,eACb,yBAAKA,UAAU,iBAAiBZ,EAAKiB,QAAQC,SAC7C,yBAAKN,UAAU,eAAeZ,EAAKmB,OACnC,yBAAKP,UAAU,kBAAkBZ,EAAKoB,UACrCpB,EAAKqB,QAAQC,KAAI,SAACC,GAAD,OAChB,yBACEX,UAAU,kBACVY,IAAKD,EACLE,yBAlCMC,EAkC4BH,EAjCrC,CAAEI,OAAQD,MADF,IAACA,KAqCV,yBAAKd,UAAU,0BACb,yBAAKA,UAAU,mBAAmBZ,EAAK4B,QACvC,yBAAKhB,UAAU,oBAAf,oBAKJZ,EAAKU,WACL,yBAAKE,UAAU,2CACZZ,EAAK6B,eAAeC,aAIxB9B,EAAKU,WAAaR,GACjB,yBAAKU,UAAU,gBAAgBZ,EAAK6B,eAAeE,UAGpD/B,EAAKU,YAAcR,GAClB,yBAAKU,UAAU,gBAAf,uIAC6B,0BAAMG,QAAST,GAAf,8BCrEtB,SAAS0B,IAAe,IAAD,EACrB/B,mBAAS,CACtB,CACEgC,GAAI,EACJhB,QAAS,CACPC,QAAS,+IACTgB,cAAe,2FAEjBf,MAAO,6CACPC,SAAU,+CACVC,QAAS,CAAC,iDAAoB,8EAC9BO,OAAQ,MACRC,eAAgB,CACdE,SAAU,4LACVD,YAAa,gKAEfpB,WAAW,GAEb,CACEuB,GAAI,EACJhB,QAAS,CACPC,QAAS,+IACTgB,cAAe,2FAEjBf,MAAO,6CACPC,SAAU,wCACVC,QAAS,CAAC,iDAAoB,uFAC9BO,OAAQ,EACRC,eAAgB,CACdE,SAAU,oPACVD,YAAa,yJAEfpB,WAAW,GAEb,CACEuB,GAAI,EACJhB,QAAS,CACPC,QAAS,+IACTgB,cAAe,2FAEjBf,MAAO,6CACPC,SAAU,wCACVC,QAAS,CACP,kDACA,4FACA,+FAEFO,OAAQ,EACRC,eAAgB,CACdE,SAAU,8LACVD,YAAa,yJAEfpB,WAAW,KAnDRV,EAD6B,oBAwDpC,OACE,yBAAKY,UAAU,gBACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,SAAf,sIAEA,yBAAKA,UAAU,aACZZ,EAAKsB,KAAI,SAACC,GAAD,OACR,kBAAC,EAAD,CAAMC,IAAKD,EAAKU,GAAIjC,KAAMuB,UCxDvBY,MARf,WACE,OACE,yBAAKvB,UAAU,OACb,kBAAC,EAAD,QCMcwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fc7bd7ae.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./Card.scss\";\r\n\r\nexport default function Card({ data }) {\r\n  const [isSelected, setIsSelected] = useState(false);\r\n  const [dontHover, setDontHover] = useState(false);\r\n\r\n  const selectHandler = (e) => {\r\n    e.preventDefault();\r\n    setIsSelected(!isSelected);\r\n  };\r\n\r\n  const selectHandlerCard = (e) => {\r\n    selectHandler(e);\r\n    setDontHover(true);\r\n  };\r\n\r\n  const descText = (text) => {\r\n    return { __html: text };\r\n  };\r\n\r\n  let cardClasses = [\"card\"];\r\n\r\n  if (!data.available) {\r\n    cardClasses.push(\"disabled\");\r\n  }\r\n\r\n  if (isSelected) {\r\n    cardClasses.push(\"selected\");\r\n  }\r\n\r\n  if (dontHover) {\r\n    cardClasses.push(\"donthover\");\r\n  }\r\n\r\n  return (\r\n    <div className=\"card-col\">\r\n      <a\r\n        href=\"#\"\r\n        className={cardClasses.join(\" \")}\r\n        onClick={selectHandlerCard}\r\n        onMouseLeave={() => setDontHover(false)}\r\n      >\r\n        <div className=\"card__inner\">\r\n          <div className=\"card__toptext\">{data.topline.default}</div>\r\n          <div className=\"card__title\">{data.title}</div>\r\n          <div className=\"card__subtitle\">{data.subtitle}</div>\r\n          {data.subtext.map((item) => (\r\n            <div\r\n              className=\"card__thin-text\"\r\n              key={item}\r\n              dangerouslySetInnerHTML={descText(item)}\r\n            ></div>\r\n          ))}\r\n          <div className=\"round-card card__round\">\r\n            <div className=\"round-card__num\">{data.weight}</div>\r\n            <div className=\"round-card__text\">кг</div>\r\n          </div>\r\n        </div>\r\n      </a>\r\n\r\n      {!data.available && (\r\n        <div className=\"card-botline card-botline--notavailible\">\r\n          {data.cardBottomText.notAvalible}\r\n        </div>\r\n      )}\r\n\r\n      {data.available && isSelected && (\r\n        <div className=\"card-botline\">{data.cardBottomText.selected}</div>\r\n      )}\r\n\r\n      {data.available && !isSelected && (\r\n        <div className=\"card-botline\">\r\n          Чего сидишь? Порадуй котэ, <span onClick={selectHandler}>купи</span>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport \"./MainContent.scss\";\r\nimport Card from \"../Card/Card\";\r\n\r\nexport default function MainContent() {\r\n  const [data] = useState([\r\n    {\r\n      id: 1,\r\n      topline: {\r\n        default: \"Сказочное заморское яство\",\r\n        selectedHover: \"Котэ не одобряет?\",\r\n      },\r\n      title: \"Нямушка\",\r\n      subtitle: \"с фуа-гра\",\r\n      subtext: [\"<b>10</b> порций\", \"мышь в подарок\"],\r\n      weight: \"0,5\",\r\n      cardBottomText: {\r\n        selected: \"Печень утки разварная с артишоками.\",\r\n        notAvalible: \"Печалька, с фуа-гра закончился.\",\r\n      },\r\n      available: true,\r\n    },\r\n    {\r\n      id: 2,\r\n      topline: {\r\n        default: \"Сказочное заморское яство\",\r\n        selectedHover: \"Котэ не одобряет?\",\r\n      },\r\n      title: \"Нямушка\",\r\n      subtitle: \"с рыбой\",\r\n      subtext: [\"<b>40</b> порций\", \"<b>2</b> мыши в подарок\"],\r\n      weight: 2,\r\n      cardBottomText: {\r\n        selected: \"Головы щучьи с чесноком да свежайшая сёмгушка.\",\r\n        notAvalible: \"Печалька, с рыбой закончился.\",\r\n      },\r\n      available: true,\r\n    },\r\n    {\r\n      id: 3,\r\n      topline: {\r\n        default: \"Сказочное заморское яство\",\r\n        selectedHover: \"Котэ не одобряет?\",\r\n      },\r\n      title: \"Нямушка\",\r\n      subtitle: \"с курой\",\r\n      subtext: [\r\n        \"<b>100</b> порций\",\r\n        \"<b>5</b> мышей в подарок\",\r\n        \"заказчик доволен\",\r\n      ],\r\n      weight: 5,\r\n      cardBottomText: {\r\n        selected: \"Филе из цыплят с трюфелями в бульоне.\",\r\n        notAvalible: \"Печалька, с курой закончился.\",\r\n      },\r\n      available: false,\r\n    },\r\n  ]);\r\n\r\n  return (\r\n    <div className=\"main-content\">\r\n      <div className=\"container\">\r\n        <div className=\"title\">Ты сегодня покормил кота?</div>\r\n\r\n        <div className=\"cards row\">\r\n          {data.map((item) => (\r\n            <Card key={item.id} data={item} />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport MainContent from \"./components/MainContent/MainContent\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <MainContent />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport \"./assets/main.scss\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}